-- luacheck: globals vim
-- luacheck: ignore 113
local lush = require("lush")
local colors = require("lushwal").colors
require("lushwal.base")

return lush(function(injected_functions)
	local sym = injected_functions.sym
	-- selene: allow(undefined_variable)
	return {
		sym("@preproc")({ PreProc }),
		sym("@define")({ Define }),
		sym("@string.special")({ SpecialChar }),
		sym("@character.special")({ SpecialChar }),
		sym("@debug")({ Debug }),
		sym("@type.definition")({ Typedef }),
		sym("@storageclass")({ StorageClass }),
		sym("@symbol")({ Identifier }),
		sym("@text.title")({ Title }),
		sym("@text.literal")({ String }),
		sym("@text.uri")({ Underlined }),
		sym("@text.math")({ Special }),
		sym("@text.environment")({ Macro }),
		sym("@text.environment.name")({ Type }),
		sym("@text.todo")({ Todo }),
		sym("@text.note")({ SpecialComment }),
		sym("@tag.attribute")({ Identifier }),

		sym("@none")({ bg = "NONE", fg = "NONE" }),
		sym("@attribute")({ fg = colors.blue }),
		sym("@boolean")({ fg = colors.blue }),
		sym("@character")({ fg = colors.yellow }),
		sym("@comment")({ fg = colors.white, gui = "italic" }),
		sym("@conditional")({ fg = colors.red }),
		sym("@constant")({ fg = colors.red }),
		sym("@constant.builtin")({ fg = colors.red }),
		sym("@constant.macro")({ fg = colors.red }),
		sym("@constructor")({ fg = colors.foreground }),
		sym("@exception")({ fg = colors.red }),
		sym("@field")({ fg = colors.green }),
		sym("@float")({ fg = colors.blue }),
		sym("@function")({ fg = colors.blue }),
		sym("@function.builtin")({ fg = colors.red }),
		sym("@function.macro")({ fg = colors.red }),
		sym("@include")({ fg = colors.cyan }),
		sym("@keyword")({ fg = colors.purple }),
		sym("@keyword.function")({ fg = colors.cyan }),
		sym("@keyword.operator")({ fg = colors.purple }),
		sym("@label")({ fg = colors.cyan }),
		sym("@method")({ fg = colors.blue }),
		sym("@namespace")({ fg = colors.blue }),
		sym("@number")({ fg = colors.blue }),
		sym("@operator")({ fg = colors.foreground }),
		sym("@parameter")({ fg = colors.yellow }),
		sym("@property")({ fg = colors.yellow }),
		sym("@punctuation.bracket")({ fg = colors.foreground }),
		sym("@punctuation.delimiter")({ fg = colors.foreground }),
		sym("@punctuation.special")({ fg = colors.br_cyan, gui = "bold" }),
		sym("@repeat")({ fg = colors.red }),
		sym("@string")({ fg = colors.blue }),
		sym("@string.escape")({ fg = colors.green }),
		sym("@string.regex")({ fg = colors.green }),
		sym("@tag")({ fg = colors.yellow }),
		sym("@tag.delimiter")({ fg = colors.cyan }),
		sym("@text")({ fg = colors.green }),
		sym("@text.bold")({ gui = "bold", fg = colors.yellow }),
		sym("@text.underline")({ underline = true }),
		sym("@text.strike")({ strikethrough = true }),
		sym("@text.danger")({ fg = colors.red }),
		sym("@text.emphasis")({ gui = "italic", fg = colors.purple }),
		sym("@text.reference")({ fg = colors.red }),
		sym("@text.underline")({ gui = "underline" }),
		sym("@text.uri")({ gui = "underline", bg = colors.br_black }),
		sym("@type")({ fg = colors.blue }),
		sym("@type.builtin")({ fg = colors.blue }),
		sym("@variable")({ fg = colors.yellow }),
		sym("@variable.builtin")({ fg = colors.red }),
	}
	-- selene: deny(undefined_variable)
end)
