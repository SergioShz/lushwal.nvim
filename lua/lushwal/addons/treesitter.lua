-- luacheck: globals vim
-- luacheck: ignore 113
local lush = require("lush")
local colors = require("lushwal").colors
return lush(function()
	-- selene: allow(undefined_variable)
	return {
		TSAnnotation({ fg = colors.blue }),
		TSAttribute({ fg = colors.blue }),
		TSBoolean({ fg = colors.blue }),
		TSCharacter({ fg = colors.yellow }),
		TSComment({ fg = colors.white, gui = "italic" }),
		TSConditional({ fg = colors.orange }),
		TSConstBuiltin({ fg = colors.red }),
		TSConstMacro({ fg = colors.red }),
		TSConstant({ fg = colors.red }),
		TSConstructor({ fg = colors.foreground }),
		TSEmphasis({ gui = "italic", fg = colors.purple }),
		TSError({ fg = colors.orange }),
		TSException({ fg = colors.orange }),
		TSField({ fg = colors.green }),
		TSFloat({ fg = colors.blue }),
		TSFuncBuiltin({ fg = colors.red }),
		TSFuncMacro({ fg = colors.red }),
		TSFunction({ fg = colors.blue }),
		TSInclude({ fg = colors.cyan }),
		TSKeyword({ fg = colors.purple }),
		TSKeywordFunction({ fg = colors.cyan }),
		TSKeywordOperator({ fg = colors.purple }),
		TSLabel({ fg = colors.cyan }),
		TSMethod({ fg = colors.blue }),
		TSNamespace({ fg = colors.blue }),
		TSNumber({ fg = colors.blue }),
		TSOperator({ fg = colors.foreground }),
		TSParameter({ fg = colors.yellow }),
		TSParameterReference({ fg = colors.red }),
		TSProperty({ fg = colors.yellow }),
		TSPunctBracket({ fg = colors.foreground }),
		TSPunctDelimiter({ fg = colors.foreground }),
		TSPunctSpecial({ fg = colors.br_cyan, gui = "bold" }),
		TSRepeat({ fg = colors.orange }),
		TSString({ fg = colors.blue }),
		TSStringEscape({ fg = colors.green }),
		TSStringRegex({ fg = colors.green }),
		TSStrong({ gui = "bold", fg = colors.yellow }),
		TSStructure({ fg = colors.blue }),
		TSTag({ fg = colors.yellow }),
		TSTagDelimiter({ fg = colors.cyan }),
		TSText({ fg = colors.green }),
		TSType({ fg = colors.blue }),
		TSTypeBuiltin({ fg = colors.blue }),
		TSURI({ gui = "underline", bg = colors.br_black }),
		TSUnderline({ gui = "underline" }),
		TSVariable({ fg = colors.yellow }),
		TSVariableBuiltin({ fg = colors.orange }),
	}
	-- selene: deny(undefined_variable)
end)
