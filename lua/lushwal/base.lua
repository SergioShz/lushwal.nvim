pcall(vim.cmd, "packadd lush.nvim")
local lush = require("lush")

local colors = require("lushwal").colors
local scheme = lush(function()
	if not colors then
		return {}
	end
	-- selene: allow(undefined_variable)
	return {
            -- referenced
            Normal({fg=colors.color7}),
            Bold({Normal,gui="bold"}),
            Italic({Normal,gui="italic"}),

            ALEError({fg=colors.color1}),
            ALEErrorSign({fg=colors.color1}),
            ALEWarning({fg=colors.color3}),
            ALEWarningSign({fg=colors.color3}),

            Boolean({fg=colors.color5}),

            Character({fg=colors.color1}),
            ColorColumn({fg=colors.color0,bg=colors.color4}),
            Comment({fg=colors.color8,gui="italic"}),
            Conceal({fg=colors.br_black,bg=colors.background}),
            Conditional({fg=colors.color5}),
            Constant({fg=colors.color3}),
            Cursor({fg=colors.color8}),
            CursorColumn({fg=colors.color7,bg=colors.color8}),
            CursorLine({fg=colors.color0,bg=colors.color2,gui="None"}),
            CursorLineNr({fg=colors.color8,gui="None"}),
            cOperator({fg=colors.color6}),
            cPreCondit({fg=colors.color5}),
            cssBraces({fg=colors.color7}),
            cssFunctionName({fg=colors.color4}),
            cssMultiColumnAttr({fg=colors.color2}),
            cssNoise({fg=colors.color8}),
            cssTagName({fg=colors.color1}),
            cssUnitDecorators({fg=colors.color7}),
            cssValueLength({fg=colors.color7}),
            cssValueNumber({fg=colors.color7}),

            Debug({fg=colors.red}),
            Define({fg=colors.color5}),
            Delimiter({fg=colors.color5}),
            DiffAdd({fg=colors.color2,gui="bold"}),
            DiffAdded({DiffAdd}),
            DiffChange({fg=colors.color8}),
            DiffDelete({fg=colors.color1,gui="bold"}),
            DiffFile({fg=colors.red,bg=colors.background}),
            DiffLine({fg=colors.blue,bg=colors.background}),
            DiffNewFile({fg=colors.green,bg=colors.background}),
            DiffRemoved({DiffDelete}),
            DiffText({fg=colors.color4}),
            Directory({fg=colors.color4}),
            diffRemoved({DiffDelete}),

            EndOfBuffer({fg=colors.foreground,bg=colors.background}),
            Error({fg=colors.color7,bg=colors.color1}),
            ErrorMsg({fg=colors.color8}),
            Exception({fg=colors.red}),

            Float({fg=colors.color5}),
            FoldColumn({fg=colors.color7}),
            Folded({fg=colors.color8,gui="italic"}),
            Function({fg=colors.blue}),

            gitCommitOverflow({fg=colors.red}),
            gitCommitSummary({fg=colors.green}),

            helpCommand({fg=colors.yellow}),
            helpExample({fg=colors.yellow}),
            helpLeadBlank({fg=colors.color7}),
            helpNormal({fg=colors.color7}),
            htmlBold({fg=colors.color3,gui="bold"}),
            htmlEndTag({fg=colors.color7}),
            htmlH1({fg=colors.color7}),
            htmlItalic({fg=colors.color5,gui="italic"}),
            htmlLink({fg=colors.color1}),
            htmlTag({fg=colors.color7}),
            htmlTagName({fg=colors.color1}),


            Identifier({fg=colors.color1}),
            Ignore({fg=colors.color0,bg=colors.color8}),
            IncSearch({fg=colors.color0,bg=colors.color3}),
            Include({fg=colors.color4}),

            javaScript({fg=colors.color7}),
            javaScriptBraces({fg=colors.color7}),
            javaScriptNumber({fg=colors.color5}),

            Keyword({fg=colors.color5}),

            Label({fg=colors.color3}),
            LineNr({fg=colors.color8}),

            markdownAutomaticLink({fg=colors.color2}),
            markdownCode({fg=colors.color3}),
            markdownCodeBlock({fg=colors.color3}),
            markdownCodeDelimiter({fg=colors.color5}),
            markdownError({fg=colors.color7}),
            markdownH1({fg=colors.color7}),
            Macro({fg=colors.red}),
            MatchParen({fg=colors.color8,bg=colors.color1}),
            ModeMsg({fg=colors.color2}),
            MoreMsg({fg=colors.color2}),

            NERDTreeDirSlash({fg=colors.color4}),
            NERDTreeExecFile({fg=colors.color7}),
            NonText({fg=colors.color0}),
            Number({fg=colors.color3}),

            Operator({fg=colors.color7}),

            PMenu({fg=colors.white,bg=colors.br_black}),
            PMenuSel({fg=colors.foreground,bg=colors.blue}),
            PmenuSbar({fg=colors.color7,bg=colors.color6}),
            PmenuThumb({fg=colors.color8,bg=colors.color8}),
            PreProc({fg=colors.color3}),
            phpComparison({fg=colors.color7}),
            phpMemberSelector({fg=colors.color7}),
            phpParent({fg=colors.color7}),
            pythonBuiltIn({fg=colors.color4}),
            pythonFunction({fg=colors.color4}),
            pythonOperator({fg=colors.color5}),
            pythonRepeat({fg=colors.color5}),
            pythonStatement({fg=colors.color1}),

            Question({fg=colors.color4}),

            Repeat({fg=colors.color3}),
            rubyAttribute({fg=colors.color4}),
            rubyConstant({fg=colors.color3}),
            rubyDefine({fg=colors.color5}),
            rubyFunction({fg=colors.color4}),
            rubyInclude({fg=colors.color4}),
            rubyInteger({fg=colors.color3}),
            rubyInterpolation({fg=colors.color2}),
            rubyInterpolationDelimiter({fg=colors.color3}),
            rubyRegexp({fg=colors.color6}),
            rubyRegexpAnchor({fg=colors.color7}),
            rubyStringDelimiter({fg=colors.color2}),
            rubySymbol({fg=colors.color2}),
            rubyTodo({fg=colors.color8}),

            Search({fg=colors.color0,bg=colors.color3}),
            SignColumn({fg=colors.grey,bg=colors.background}),
            SignifySignAdd({fg=colors.color2}),
            SignifySignChange({fg=colors.color4}),
            SignifySignDelete({fg=colors.color1}),
            Special({fg=colors.color6}),
            SpecialChar({fg=colors.color5}),
            SpecialKey({fg=colors.color8}),
            SpellBad({fg=colors.color1,gui="underline"}),
            SpellCap({fg=colors.color4,gui="underline"}),
            SpellLocal({fg=colors.color5,gui="underline"}),
            SpellRare({fg=colors.color6,gui="underline"}),
            Statement({fg=colors.color1}),
            StatusLine({fg=colors.color0,bg=colors.color7}),
            StatusLineNC({fg=colors.color0,bg=colors.color8}),
            StatusLineTerm({fg=colors.br_green,bg=colors.green}),
            StatusLineTermNC({fg=colors.br_yellow,bg=colors.br_black}),
            StorageClass({fg=colors.yellow}),
            String({fg=colors.color2}),
            Structure({fg=colors.color5}),
            sassClassChar({fg=colors.color5}),
            sassInclude({fg=colors.color5}),
            sassMixinName({fg=colors.color4}),
            sassMixing({fg=colors.color5}),
            sassidChar({fg=colors.color1}),
            scssAttribute({fg=colors.color7}),
            scssSelectorChar({fg=colors.color7}),
            signColumn({fg=colors.color4}),

            TabLine({fg=colors.color8}),
            TabLineFill({fg=colors.color8}),
            TabLineSel({fg=colors.color0,bg=colors.color4}),
            Tag({fg=colors.color3}),
            TermCursorNC({fg=colors.color0,bg=colors.color3}),
            Title({fg=colors.color4,gui="bold"}),
            Todo({fg=colors.color0,bg=colors.color2}),
            TooLong({fg=colors.red}),
            Type({fg=colors.color3}),
            Typedef({fg=colors.color3}),

            Underlined({fg=colors.color1}),
            User({Normal}),

            VertSplit({fg=colors.color0,bg=colors.color8}),
            Visual({fg=colors.color15,bg=colors.color0}),
            VisualNOS({fg=colors.color1}),
            vimBracket({fg=colors.color7}),
            vimCommentString({fg=colors.color8}),
            vimMapModKey({fg=colors.color4}),
            vimNotation({fg=colors.color4}),
            vimUserCommand({fg=colors.color1}),

            WarningMsg({fg=colors.color0,bg=colors.color1}),
            Whitespace({Conceal}),
            WildMenu({fg=colors.color0,bg=colors.color2}),
            WinBar({fg=colors.white,bg=colors.background,gui="None"}),
            WinBarNC({fg=colors.grey,bg=colors.background,gui="None"}),
            WinSeparator({VertSplit}),

            xdefaultsValue({fg=colors.color7}),
	}
	-- selene: deny(undefined_variable)
end)

return scheme
